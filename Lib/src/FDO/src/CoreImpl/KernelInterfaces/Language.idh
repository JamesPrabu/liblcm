/*--------------------------------------------------------------------*//*:Ignore this sentence.
Copyright (c) 1999-2013 SIL International
This software is licensed under the LGPL, version 2.1 or later
(http://www.gnu.org/licenses/lgpl-2.1.html)

File: Language.idh
Responsibility: John Thomson
Last reviewed: Mid June, 2000. Several changes suggested, not yet all made or reviewed.

Description:
	The Language classes provide specifications and implementations of how text in various
	(language) writing systems behaves.

	Note: Language.idh is included in FwKernelTlb.idl. This is how it becomes available to C#
	programs. Therefore, to make a new or modified interface available without remakefw,
	you must cc mkfwk-nodep, than do a clean COMInterfaces-nodep, then build COMInterfaces-nopdep.

	The root (document) class is the LgWritingSystem class. Logically there ought
	possibly to be a LgLanguage class which owns a number of writing systems; but a Language
	has no computationally interesting behavior until it is encoded in a writing system, and it
	is useful to be able to install an writing system in isolation. We therefore decided not to
	implement Language as a distinct class, but just to have the LgWritingSystem class
	provide some basic documentation about its language.

	The language writing system class has a number of "engines." Each of these implements an
	interface for one area of functionality related to text manipulation.

	Note that writing systems as described in this document are not intended to model the
	linguistically interesting aspects of these concepts. They are specifically intended to
	model those aspects needed so that the computer can correctly manipulate data in the
	particular writing system.
-------------------------------------------------------------------------------*//*:End Ignore*/
// Indentation is as if all this were embedded in a library declaration.

	//:>****************************************************************************************
	//:>		Forward declarations
	//:>****************************************************************************************
	interface ILgWritingSystemFactory;

	// Properties passed to renderer to tell it how to draw text.

	// An HFONT is typically produced by combining the four font properties specified
	// into a LOGFONT with lfWidth, lfOrientation, lfEscapement set to zero,
	// lfUnderline set to false, (Client handles underlining; we want several types)
	// lfStrikeOut set to false,
	// lfCharSet set to DEFAULT_CHARSET,
	// lfOutPrecision set to OUT_TT_ONLY_PRECIS
	// lfClipPrecision set to CLIP_DEFAULT_PRECIS,
	// lfQuality set to DEFAULT_QUALITY, and
	// lfPitchAndFamily set to DEFAULT_PITCH | FF_DONTCARE

	// szFaceName may be an actual font family name, or one of the names <serif>,
	// <sans-serif>, <monospace>, in which case the renderer must provide an appropriate
	// interpretation. The magic names must match exactly (including case) and must include
	// the angle brackets.

	// The dympHeight value is usually modified by the WS before making an HFONT if
	// superscript or subscript is specified;
	// other properties may be modified as desired by the old writing system, by default or as
	// a result of interpreting a old writing system style. For example, the WS may know of a
	// minimum useful height for a particular font, and enforce this.

	// ENHANCE JohnT: do we need a mechanism like that used in views to allow a list of font
	// names to be passed? Seems the client could handle working out which of a list of
	// named fonts is available--unless we need to try multiple ones to cover a code point
	// range.
	// ENHANCE JohnT: should we somehow make sure that each thread has only one instance of
	// a chrp with given values, so we can use the pointer to it as a key to look up an
	// HFONT?
	typedef struct
	{
		COLORREF clrFore;
		COLORREF clrBack;
		COLORREF clrUnder;		// Underline color.
		int dympOffset;		// Baseline offset (+ve = raise) added to effect of super/subscript
		int ws;
		byte fWsRtl;		// true if writing system is right-to-left
		int nDirDepth;		// number of levels of direction change, para to this run
		int ssv;			// indicates superscript, subscript or normal.
		int unt;			// FwUnderlineType.
		// Remaining properties are the interesting ones for a LOGFONT
		// Warning: these must be kept together at the end of the struct.
		// Note that this assumes the client resolves ws-dependent names like Serif,
		// and also deals with finding the first available font in a list. This array
		// has room for only one font name.
		int ttvBold;
		int ttvItalic;
		int dympHeight; // normal font size. Superscript or subscript will usually reduce.
		OLECHAR szFaceName[32];
		OLECHAR szFontVar[64];
	} LgCharRenderProps;	// Hungarian: chrp

	/*******************************************************************************************
		Interface ILgWritingSystem
		An LgWritingSystem represents one way of writing data in a particular language
		(or dialect). It has a number of engines which implement various aspects of writing
		system behavior.

		ENHANCE: May need some more 'documentation' type attributes, such as
		an author, region, country--what exactly is useful?

		@h3{When to implement}
		Clients should not implement this interface.

		@h3{When to use}
		Use this class when you need to get one of the engines or other bits of information
		it stores about an writing system. In some cases, if you need only one engine, it is
		simpler to ask the ${LgWritingSystemFactory} for it in a single step.

		Don't use an ILgWritingSystem when you just need to identify an writing system, but
		don't actually need any of the engines. Use the integer which stands for the writing
		system.

		@h3{How to obtain an instance}
		Normally, use the get_Engine method of an ${LgWritingSystemFactory}. This will create
		and writing system with all default engines if one does not already exist. To avoid
		this, use get_EngineOrNull instead.

		@h3{Hungarian: ws or wseng}
		(Note: use wseng when you need to distinguish the interface/object from the writing
		system's integer code, which uses ws as its Hungarian.)
	*******************************************************************************************/
	DeclareInterface(LgWritingSystem, Unknown, 9C0513AB-1AB9-4741-9C49-FA65FA83B7CC)
	{
		// The identifier for this writing system.
		[propget] HRESULT Id(
			[out, retval] BSTR *pbstr);

		// GET THE WRITING SYSTEM INTEGER that identifies this writing system to classes which
		// don't actually need to use its methods
		[propget] HRESULT Handle(
			[out, retval] int * pws);

		// Get the language name.
		[propget] HRESULT LanguageName(
			[out, retval] BSTR * pbstr);

		// Get the name of the spelling dictionary to use for this writing system.
		// Currently returns a generally-useful default, unless explicitly set to empty
		// to prevent this.
		[propget] HRESULT SpellCheckingId(
			[out, retval] BSTR *pbstr);

		// Get the primary direction, used for complex embedding; may have fragments like
		// numbers that go the other way internally.
		[propget] HRESULT RightToLeftScript(
			[out, retval] ComBool * pfRightToLeft);

		// Get the "serif font variation" string which is used, for instance, to specify
		// Graphite features.
		[propget] HRESULT DefaultFontFeatures(
			[out, retval] BSTR * pbstr);

		// Get the default serif font; usually used for the main body of text in a document.
		[propget] HRESULT DefaultFontName(
			[out, retval] BSTR * pbstr);

		// Apply any changes to the chrp before it is used for real: currently,
		// interpret the magic font names.
		HRESULT InterpretChrp(
			[in, out] LgCharRenderProps * pchrp);

		// Returns true to pass NFC text to the keyboard, otherwise we pass NFD.
		[propget] HRESULT UseNfcContext(
			[out, retval] ComBool * pUseNfc);

		// Return true if character is considered to be part of a word (by default, this
		// corresponds to Unicode general category Mc, Mn, and categories starting with L.
		[propget] HRESULT IsWordForming(
			[in] int ch,
			[out, retval] ComBool *pfRet);

		// The ICU locale for this writing system.
		[propget] HRESULT IcuLocale(
			[out, retval] BSTR *pbstr);

		// Returns true if graphite is enabled for this writing system.
		[propget] HRESULT IsGraphiteEnabled(
			[out, retval] ComBool *pfRet);

		// Gets the language writing system factory that created this writing system.
		[propget] HRESULT WritingSystemFactory(
			[out, retval] ILgWritingSystemFactory ** ppwsf);
	};

	/*******************************************************************************************
		Interface ILgWritingSystemFactory
		Knows how to find an writing system engine from an writing system integer or an ICU
		Locale string.

		@h3{When to implement}
		Never implement this interface.

		@h3{When to use}
		Use this interface when you need to obtain writing systems and their engines.

		@h3{How to obtain an instance}

		@h3{Hungarian: wsf}
	*******************************************************************************************/
	DeclareInterface(LgWritingSystemFactory, Unknown, CC2BD14F-ACCE-4246-9192-9C29441A5A09)
	{
		// Get the actual writing system object for a given Id string.
		// The current implementation returns any existing writing system for that Id,
		// or creates one with default settings if one is not already known.
		// (Use ${#get_EngineOrNull} to avoid automatic creation of a new engine.)
		[propget] HRESULT Engine(
			[in] BSTR bstrId,
			[out, retval] ILgWritingSystem ** ppwseng);

		// Get the actual writing system object for a given code, or returns NULL if one does
		// not already exist.
		// (Use ${#get_Engine} if you prefer to have an writing system created automatically if
		// one does not already exist.)
		[propget] HRESULT EngineOrNull(
			[in] int ws,
			[out, retval] ILgWritingSystem ** ppwseng);

		// Get an writing system handle from an Id, or 0 if no such writing system exists.
		// Return S_FALSE if the writing system does not exist.
		HRESULT GetWsFromStr(
			[in] BSTR bstr,
			[out, retval] int * pws);
		// Get the Id for the writing system if it exists, or NULL if it doesn't.
		// Return S_FALSE if the writing system does not exist.
		HRESULT GetStrFromWs(
			[in] int ws,
			[out, retval] BSTR * pbstr);

		// Get the ICU locale for the writing system if it exists, or NULL if it doesn't.
		// Return S_FALSE if the writing system does not exist.
		HRESULT GetIcuLocaleFromWs(
			[in] int ws,
			[out, retval] BSTR * pbstr);

		// Get the number of writing systems currently installed in the system
		[propget] HRESULT NumberOfWs(
			[out, retval] int * pcws);
		// Get the list of writing systems currrently installed in the system.
		HRESULT GetWritingSystems(
			[out, size_is(cws)] int * rgws,
			[in] int cws);

		// Get the default user interface writing system.
		[propget] HRESULT UserWs(
			[out, retval] int * pws);
		// Set the default user interface writing system. This should usually be done very early in
		// the lifecycle of the WSF.
		[propput] HRESULT UserWs(
			[in] int ws);
	};
